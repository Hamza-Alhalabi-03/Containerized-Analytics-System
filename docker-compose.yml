services:
  # PHP Web App for Data Entry
  data-entry-app:
    build: 
      context: ./data-entry-app
    ports:
      - "8080:80"
    volumes:
      - ./data-entry-app:/var/www/html
      - php_sessions:/var/lib/php/sessions
    depends_on:
      mysql:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network
    environment:
      - SESSION_SAVE_PATH=/var/lib/php/sessions

  # Authentication Service
  auth-service:
    build: 
      context: ./auth-service
    ports:
      - "8081:80"
    volumes:
      - ./auth-service:/var/www/html
      - php_sessions:/var/lib/php/sessions
    networks:
      - app-network
    environment:
      - SESSION_SAVE_PATH=/var/lib/php/sessions

  # MySQL Database
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306" 
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: dev_analytics
      MYSQL_USER: devuser
      MYSQL_PASSWORD: devpassword
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    # restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB Database
  mongodb:
    build: ./mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpassword
      MONGO_INITDB_DATABASE: analytics_data
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Analytics Service
  analytics-service:
    build: 
      context: ./analytics-service
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  results-app:
      build: ./results-app
      ports:
        - "8082:80"
      depends_on:
        mongodb:
          condition: service_healthy
      networks:
        - app-network
      # Remove the volume mount to avoid conflicts with vendor directory
      # We'll copy the files into the container during build instead

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  php_sessions:
  mongodb-data:
